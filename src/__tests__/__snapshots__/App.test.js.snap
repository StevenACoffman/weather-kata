// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`some simple tests for our App component calls for the weather when the button is clicked 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="App"
>
    <div
        className="App-header"
    >
        <h2>
            Weather Kata
        </h2>
    </div>
    <input
        onChange={[Function]}
        placeholder="zip code"
    />
    <button
        onClick={[Function]}
    >
        Get Weather
    </button>
    <p
        id="city-name"
    >
        Ypsilanti
    </p>
</div>,
  "nodes": Array [
    <div
      className="App"
>
      <div
            className="App-header"
      >
            <h2>
                  Weather Kata
            </h2>
      </div>
      <input
            onChange={[Function]}
            placeholder="zip code"
      />
      <button
            onClick={[Function]}
      >
            Get Weather
      </button>
      <p
            id="city-name"
      >
            Ypsilanti
      </p>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <App
        weather={
                Object {
                        "makeCallAsync": [Function],
                      }
        }
/>,
      "_debugID": 5,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": App {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "getWeather": [Function],
        "handleChange": [Function],
        "props": Object {
          "weather": Object {
            "makeCallAsync": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "input": "48197",
          "weatherBody": Object {
            "name": "Ypsilanti",
          },
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "weather": Object {
          "makeCallAsync": [Function],
        },
      },
      "_mountOrder": 3,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="App"
>
          <div
                    className="App-header"
          >
                    <h2>
                              Weather Kata
                    </h2>
          </div>
          <input
                    onChange={[Function]}
                    placeholder="zip code"
          />
          <button
                    onClick={[Function]}
          >
                    Get Weather
          </button>
          <p
                    id="city-name"
          >
                    Ypsilanti
          </p>
</div>,
        "_debugID": 6,
        "_renderedOutput": <div
          className="App"
>
          <div
                    className="App-header"
          >
                    <h2>
                              Weather Kata
                    </h2>
          </div>
          <input
                    onChange={[Function]}
                    placeholder="zip code"
          />
          <button
                    onClick={[Function]}
          >
                    Get Weather
          </button>
          <p
                    id="city-name"
          >
                    Ypsilanti
          </p>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <App
    weather={
        Object {
            "makeCallAsync": [Function],
          }
    }
/>,
}
`;

exports[`some simple tests for our App component uses an inline mock syntax 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="App"
>
    <div
        className="App-header"
    >
        <h2>
            Weather Kata
        </h2>
    </div>
    <input
        onChange={[Function]}
        placeholder="zip code"
    />
    <button
        onClick={[Function]}
    >
        Get Weather
    </button>
    <p
        id="city-name"
    />
</div>,
  "nodes": Array [
    <div
      className="App"
>
      <div
            className="App-header"
      >
            <h2>
                  Weather Kata
            </h2>
      </div>
      <input
            onChange={[Function]}
            placeholder="zip code"
      />
      <button
            onClick={[Function]}
      >
            Get Weather
      </button>
      <p
            id="city-name"
      />
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <App
        weather={
                Object {
                        "makeCallAsync": [Function],
                      }
        }
/>,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": App {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "getWeather": [Function],
        "handleChange": [Function],
        "props": Object {
          "weather": Object {
            "makeCallAsync": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "weatherBody": "",
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "weather": Object {
          "makeCallAsync": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="App"
>
          <div
                    className="App-header"
          >
                    <h2>
                              Weather Kata
                    </h2>
          </div>
          <input
                    onChange={[Function]}
                    placeholder="zip code"
          />
          <button
                    onClick={[Function]}
          >
                    Get Weather
          </button>
          <p
                    id="city-name"
          />
</div>,
        "_debugID": 4,
        "_renderedOutput": <div
          className="App"
>
          <div
                    className="App-header"
          >
                    <h2>
                              Weather Kata
                    </h2>
          </div>
          <input
                    onChange={[Function]}
                    placeholder="zip code"
          />
          <button
                    onClick={[Function]}
          >
                    Get Weather
          </button>
          <p
                    id="city-name"
          />
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <App
    weather={
        Object {
            "makeCallAsync": [Function],
          }
    }
/>,
}
`;
